#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""mknode -- SEED node initialization"""

import sys, os
from uuid import uuid1
from uuid import getnode

_NODE_ID = getnode() # object id is based on unique node id

from model import Model, DEFAULT_NODE_MODEL
from model import RDF, OWL, XSD, SEED
from model import Literal, URIRef

from utils import DEFAULT_HOST, DEFAULT_PORT, _node_uri
from utils import _SEED_LOG, _init_logger


def main():
    """mknode program"""

    print "SEED directory importer"
    print "usage: <this script> <directory to import>"

    _init_logger()

    if len(sys.argv) > 1:
        root_directory = sys.argv[1]
    else:
        _SEED_LOG.error('give a directory to import')
        exit(1)

    if not os.path.exists(os.path.abspath(root_directory)):
        _SEED_LOG.error('directory not exist')
        exit(1)

    _SEED_LOG.info('creating node model ...')

    model = Model()

    _SEED_LOG.info('adding namespaces and prefixes ...')

    # use default values to generate base uri for node model
    # if every node starts its own SimpleHTTPServer, the base URI may be set as
    #   http://[IP]/node.owl

    base_uri = _node_uri(DEFAULT_HOST, DEFAULT_PORT) + '/' + DEFAULT_NODE_MODEL

    model.gen_header(base_uri)

    _SEED_LOG.info('traversing specified directory ...')

    def create_individual(i_base_uri, i_type):
        """declare individual and assign type"""
        i_uri = i_base_uri + '#' + str(uuid1(_NODE_ID))
        i_node = URIRef(i_uri)

        model.add((i_node, RDF.type, OWL.NamedIndividual))
        model.add((i_node, RDF.type, i_type))

        return i_node

    # create triples for root directory
    i_root = create_individual(base_uri, SEED.Bucket)
    model.add((i_root, SEED.name,
        Literal(os.path.basename(root_directory),
            datatype=XSD.normalizedString)))

    def traverse_dir(root_directory, parent):
        """traverse root_directory,
        transfer its individual 'parent' to create the 'contain' triple."""
        for item in os.listdir(root_directory):
            path = os.path.join(root_directory, item)

            if os.path.isdir(path):
                i_path = create_individual(base_uri, SEED.Bucket)
                traverse_dir(path, i_path)
            else:
                i_path = create_individual(base_uri, SEED.Object)

            model.add((parent, SEED.contain, i_path))
            model.add((i_path, SEED.name,
                Literal(item, datatype=XSD.normalizedString)))

            (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) \
                = os.stat(path)

            model.add((i_path, SEED.length,
                Literal(size, datatype=XSD.unsignedLong)))

            model.add((i_path, SEED.mode,
                Literal(mode, datatype=XSD.unsignedShort)))

            model.add((i_path, SEED.ctime,
                Literal(ctime, datatype=XSD.unsignedLong)))

            model.add((i_path, SEED.mtime,
                Literal(mtime, datatype=XSD.unsignedLong)))

            model.add((i_path, SEED.atime,
                Literal(atime, datatype=XSD.unsignedLong)))

            model.add((i_path, SEED.owner,
                Literal(uid, datatype=XSD.unsignedShort)))

            model.add((i_path, SEED.group,
                Literal(gid, datatype=XSD.unsignedShort)))

    traverse_dir(root_directory, i_root)

    # mission complete

    _SEED_LOG.info('saving node model ...')

    model.serialize(DEFAULT_NODE_MODEL)

    _SEED_LOG.info('created %d triples in %s.'\
        % (len(model), DEFAULT_NODE_MODEL))


if __name__ == '__main__':
    main()
