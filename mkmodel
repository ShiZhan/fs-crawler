#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""mkmodel -- SEED Core model"""

import time

from rdflib.graph import Graph
from rdflib.term import URIRef, Literal, BNode
from rdflib.namespace import Namespace, RDF, RDFS, OWL, XSD

from utils import _SEED_LOG, _init_logger, _version


def main():
    """mkmodel program"""

    _init_logger()

    _SEED_LOG.info('creating core model ...')

    model = Graph()

    _SEED_LOG.info('adding namespaces and prefixes ...')

    DC      = Namespace("http://purl.org/dc/elements/1.1/")
    TERMS   = Namespace("http://purl.org/dc/terms/")
    baseURI = "https://sites.google.com/site/ontology2013/seed.owl"
    BASE    = URIRef(baseURI)
    SEED    = Namespace(baseURI+'#')

    model.bind("rdf",   "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
    model.bind("rdfs",  "http://www.w3.org/2000/01/rdf-schema#")
    model.bind("xsd",   "http://www.w3.org/2001/XMLSchema#")
    model.bind("owl",   "http://www.w3.org/2002/07/owl#")
    model.bind("dc",    "http://purl.org/dc/elements/1.1/")
    model.bind("terms", "http://purl.org/dc/terms/")
    model.bind("seed",   SEED)

    _SEED_LOG.info('declare metadata ...')

    model.add((BASE, RDF.type, OWL['Ontology']))
    model.add((BASE, RDFS['comment'], Literal('SEED system ontology', lang='EN')))
    model.add((BASE, DC['date'], Literal('2011-3-28')))
    model.add((BASE, DC['creator'], Literal('Shi.Zhan')))
    model.add((BASE, DC['created'], Literal(
        time.strftime(u'%Y-%m-%d %H:%M:%S'.encode('utf-8'),
        time.localtime(time.time())).decode('utf-8'))))
    model.add((BASE, TERMS['license'], Literal('Copyright 2013 Shi.Zhan.'
        ' Licensed under the Apache License, Version 2.0 (the "License");'
        ' you may not use this file except in compliance with the License.'
        ' You may obtain a copy of the License at\n\n'
        '   http://www.apache.org/licenses/LICENSE-2.0.\n\n'
        ' Unless required by applicable law or agreed to in writing,'
        ' software distributed under the License is distributed on'
        ' an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,'
        ' either express or implied. See the License for the specific language'
        ' governing permissions and limitations under the License.')))

    # declare data types: <rdfs:Datatype rdf:about="&xsd;anyType"/>
    # how to use &xsd directly? as mentioned in http://www.w3.org/TR/rdf-primer/
    # solution1: use full URI
    model.add((XSD.anyType, RDF.type, RDFS.Datatype))

    _SEED_LOG.info('declare classes ...')

    model.add((SEED.Object, RDF.type, OWL.Class))
    model.add((SEED.Bucket, RDF.type, OWL.Class))
    model.add((SEED.Bucket, RDFS.subClassOf, SEED.Object))
    model.add((SEED.Composite, RDF.type, OWL.Class))
    model.add((SEED.Composite, RDFS.subClassOf, SEED.Object))

    _SEED_LOG.info('declare and assign properties ...')

    model.add((SEED.contain,    RDF.type, OWL.ObjectProperty))
    model.add((SEED.stripe,     RDF.type, OWL.ObjectProperty))
    model.add((SEED.replicate,  RDF.type, OWL.ObjectProperty))
    model.add((SEED.redundancy, RDF.type, OWL.ObjectProperty))

    model.add((SEED.name,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.path,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.mode,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.ctime,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.mtime,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.atime,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.length,    RDF.type, OWL.DatatypeProperty))
    model.add((SEED.size,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.owner,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.group,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.host,      RDF.type, OWL.DatatypeProperty))

    # Bucket contain only Object
    _node = BNode()
    model.add((_node, RDF.type, OWL.Restriction))
    model.add((_node, OWL.onProperty, SEED.contain))
    model.add((_node, OWL.allValuesFrom, SEED.Object))
    model.add((SEED.Bucket, RDFS.subClassOf, _node))

    # Composite ["stripe", "replicate", "redundancy"] only Object
    _node = BNode()
    model.add((_node, RDF.type, OWL.Restriction))
    model.add((_node, OWL.onProperty, SEED.stripe))
    model.add((_node, OWL.allValuesFrom, SEED.Object))
    model.add((SEED.Composite, RDFS.subClassOf, _node))

    _node = BNode()
    model.add((_node, RDF.type, OWL.Restriction))
    model.add((_node, OWL.onProperty, SEED.replicate))
    model.add((_node, OWL.allValuesFrom, SEED.Object))
    model.add((SEED.Composite, RDFS.subClassOf, _node))

    _node = BNode()
    model.add((_node, RDF.type, OWL.Restriction))
    model.add((_node, OWL.onProperty, SEED.redundancy))
    model.add((_node, OWL.allValuesFrom, SEED.Object))
    model.add((SEED.Composite, RDFS.subClassOf, _node))

    # Object ["name", "path", "mode", "{c|m|a}time",
    #         "length", "size", "owner", "group"]
    def addDatatypeProperty(item, property, type=XSD.anyType,
        only=False, some=False, max=None, min=None):

        _node = BNode()
        model.add((_node, RDF.type, OWL.Restriction))
        model.add((_node, OWL.onProperty, property))
        if only:
            model.add((_node, OWL.allValuesFrom, type))
        elif some:
            model.add((_node, OWL.someValuesFrom, type))
        else:
            model.add((_node, OWL.onDataRange, type))
            if max is not None:
                model.add((_node, OWL.maxQualifiedCardinality, Literal(max)))
            if min is not None:
                model.add((_node, OWL.minQualifiedCardinality, Literal(min)))
             # keep integrety, since onDataRange has been set.
            if (max is None) and (min is None):
                model.add((_node, OWL.qualifiedCardinality, Literal(1)))

        model.add((item, RDFS.subClassOf, _node))
        pass

    addDatatypeProperty(SEED.Object, SEED.name,   XSD.NCName, max=1)
    addDatatypeProperty(SEED.Object, SEED.path,   XSD.normalizedString, max=1)
    addDatatypeProperty(SEED.Object, SEED.mode,   XSD.unsignedShort, max=1)
    addDatatypeProperty(SEED.Object, SEED.ctime,  XSD.dateTimeStamp, max=1)
    addDatatypeProperty(SEED.Object, SEED.mtime,  XSD.dateTimeStamp, max=1)
    addDatatypeProperty(SEED.Object, SEED.atime,  XSD.dateTimeStamp, max=1)
    addDatatypeProperty(SEED.Object, SEED.length, XSD.unsignedLong, max=1)
    addDatatypeProperty(SEED.Object, SEED.owner,  XSD.NCName, max=1)
    addDatatypeProperty(SEED.Object, SEED.group,  XSD.NCName, max=1)

    addDatatypeProperty(SEED.Composite, SEED.size, XSD.unsignedLong, max=1)


    # Object ["host"] only HOST_ID (8 Bytes)
    _node = BNode()
    model.add((_node, RDF.type, OWL.Restriction))
    model.add((_node, OWL.onProperty, SEED.host))
    model.add((_node, OWL.allValuesFrom, XSD.hexBinary))
    model.add((SEED.Object, RDFS.subClassOf, _node))

    # Serialize the store as RDF/XML to file.
    model.serialize("seed.owl", format="pretty-xml")

    print "Produced %d Triples." % len(model)


if __name__ == '__main__':
    main()
