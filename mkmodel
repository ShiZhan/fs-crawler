#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""mkmodel -- SEED Core model creation script"""

import time

from model import *
from utils import _SEED_LOG, _init_logger, VERSION


def set_property(model, (sub, pre, obj),
    only=False, some=False, max_qc=None, min_qc=None):
    """set property with restriction on object"""

    _node = BNode()
    model.add((_node, RDF.type, OWL.Restriction))
    model.add((_node, OWL.onProperty, pre))
    if only:
        model.add((_node, OWL.allValuesFrom, obj))
    elif some:
        model.add((_node, OWL.someValuesFrom, obj))
    else:
        model.add((_node, OWL.onDataRange, obj))
        if max_qc is not None:
            model.add((_node, OWL.maxQualifiedCardinality,
                Literal(max_qc, datatype=XSD.nonNegativeInteger)))
        if min_qc is not None:
            model.add((_node, OWL.minQualifiedCardinality,
                Literal(min_qc, datatype=XSD.nonNegativeInteger)))
        # keep integrity, something must be set
        # since onProperty, onDataRange has been set
        if (max_qc is None) and (min_qc is None):
            model.add((_node, OWL.qualifiedCardinality,
                Literal(1, datatype=XSD.nonNegativeInteger)))

    model.add((sub, RDFS.subClassOf, _node))


def gen_core(model):
    """generate core model"""

    # core model base, prefix and namespace

    # setup prefix
    model.bind("rdf",   "http://www.w3.org/1999/02/22-rdf-syntax-ns#")
    model.bind("rdfs",  "http://www.w3.org/2000/01/rdf-schema#")
    model.bind("xsd",   "http://www.w3.org/2001/XMLSchema#")
    model.bind("owl",   "http://www.w3.org/2002/07/owl#")
    model.bind("dc",    DC_URI)
    model.bind("terms", TERMS_URI)
    model.bind("seed",  SEED_URI)

    # setup base URI
    model.base = URIRef(SEED_BASE)

    # this is an OWL Ontology
    model.add((model.base, RDF.type,     OWL.Ontology))

    model.add((model.base, RDFS.comment, Literal('SEED ontology', lang='EN')))

    # Dublin Core Metadata
    model.add((model.base, DC.date,      Literal('2013-01-31')))
    model.add((model.base, DC.creator,   Literal('Shi.Zhan')))
    model.add((model.base, DC.created,
                Literal(time.strftime('%Y-%m-%d %H:%M:%S',
                            time.localtime(time.time())).encode('utf-8'),
                        datatype=XSD.dateTimeStamp)
            ))
    model.add((model.base, TERMS.license, Literal('Copyright 2013 Shi.Zhan.'
        ' Licensed under the Apache License, Version 2.0 (the "License");'
        ' you may not use this file except in compliance with the License.'
        ' You may obtain a copy of the License at\n\n'
        '   http://www.apache.org/licenses/LICENSE-2.0.\n\n'
        ' Unless required by applicable law or agreed to in writing,'
        ' software distributed under the License is distributed on'
        ' an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,'
        ' either express or implied. See the License for the specific language'
        ' governing permissions and limitations under the License.',
        datatype=XSD.string)))

    # use program version as model version, recording the origin of model.
    model.add((model.base, OWL.versionInfo,
        Literal(VERSION, datatype=XSD.hexBinary)))

    # setup default datatype
    model.add((XSD.anyType, RDF.type, RDFS.Datatype))

    # declare classes

    model.add((SEED.Object, RDF.type, OWL.Class))
    model.add((SEED.Bucket, RDF.type, OWL.Class))
    model.add((SEED.Bucket, RDFS.subClassOf, SEED.Object))
    model.add((SEED.SimpleObject, RDF.type, OWL.Class))
    model.add((SEED.SimpleObject, RDFS.subClassOf, SEED.Object))
    model.add((SEED.CompositeObject, RDF.type, OWL.Class))
    model.add((SEED.CompositeObject, RDFS.subClassOf, SEED.SimpleObject))

    model.add((SEED.Bucket, OWL.disjointWith, SEED.SimpleObject))

    # declare and assign properties

    model.add((SEED.contain,    RDF.type, OWL.ObjectProperty))
    model.add((SEED.stripe,     RDF.type, OWL.ObjectProperty))
    model.add((SEED.replicate,  RDF.type, OWL.ObjectProperty))
    model.add((SEED.redundancy, RDF.type, OWL.ObjectProperty))

    model.add((SEED.name,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.origin,    RDF.type, OWL.DatatypeProperty))

    model.add((SEED.mode,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.ctime,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.mtime,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.atime,     RDF.type, OWL.DatatypeProperty))
    model.add((SEED.size,      RDF.type, OWL.DatatypeProperty))
    model.add((SEED.uid,       RDF.type, OWL.DatatypeProperty))
    model.add((SEED.gid,       RDF.type, OWL.DatatypeProperty))

    # Bucket contain only Object
    set_property(model, (SEED.Bucket, SEED.contain, SEED.Object), only=True)

    # CompositeObject [stripe, replicate, redundancy] only SimpleObject
    set_property(model, 
        (SEED.CompositeObject, SEED.stripe,     SEED.SimpleObject), only=True)
    set_property(model, 
        (SEED.CompositeObject, SEED.replicate,  SEED.SimpleObject), only=True)
    set_property(model, 
        (SEED.CompositeObject, SEED.redundancy, SEED.SimpleObject), only=True)

    # Object name
    set_property(model,
        (SEED.Object, SEED.name, XSD.normalizedString), max_qc=1)

    # Object origin
    set_property(model,
        (SEED.Object, SEED.origin, XSD.normalizedString), max_qc=1)

    # Object stat [mode, {c|m|a}time, length, size, uid, gid]
    set_property(model, (SEED.Object, SEED.mode,  XSD.unsignedShort), max_qc=1)
    set_property(model, (SEED.Object, SEED.ctime, XSD.unsignedLong),  max_qc=1)
    set_property(model, (SEED.Object, SEED.mtime, XSD.unsignedLong),  max_qc=1)
    set_property(model, (SEED.Object, SEED.atime, XSD.unsignedLong),  max_qc=1)
    set_property(model, (SEED.Object, SEED.size,  XSD.unsignedLong),  max_qc=1)
    set_property(model, (SEED.Object, SEED.uid,   XSD.int),           max_qc=1)
    set_property(model, (SEED.Object, SEED.gid,   XSD.int),           max_qc=1)


def main():
    """mkmodel program"""

    _init_logger()

    _SEED_LOG.info('creating core model ...')

    core = Graph()

    gen_core(core)

    # Serialize the store as RDF/XML to file.
    core.serialize(DEFAULT_CORE_MODEL)

    _SEED_LOG.info("produced %d triples in %s." % (len(core), DEFAULT_CORE_MODEL))


if __name__ == '__main__':
    main()
