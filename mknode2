#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""mknode -- SEED node initialization, standalone template version"""

import sys, os, time, socket
from string import Template
from uuid import uuid1
from uuid import getnode

from utils import _SEED_LOG, _init_logger, VERSION


# BEGIN: model template
t_license = \
"""
Copyright 2013 Shi.Zhan.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0.

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing
permissions and limitations under the License.
"""

t_header = Template(
"""<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:owl="http://www.w3.org/2002/07/owl#"
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:terms="http://purl.org/dc/terms/"
   xmlns:seed="$seed_base#"
>
  <rdf:Description rdf:about="$base_uri">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>
    <owl:imports rdf:resource="$seed_base"/>
    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#hexBinary">$version</owl:versionInfo>
    <dc:created rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTimeStamp">$created</dc:created>
    <dc:date>2013-01-31</dc:date>
    <rdfs:comment xml:lang="EN">SEED node ontology</rdfs:comment>
    <terms:license rdf:datatype="http://www.w3.org/2001/XMLSchema#string">$license</terms:license>
    <dc:creator>Shi.Zhan</dc:creator>
  </rdf:Description>
""")
# $seed_base, $base_uri,
# $version, $created, $license,

t_individual = Template(
"""
  <rdf:Description rdf:about="$base_uri#$object_id">
    <rdf:type rdf:resource="$seed_base#$object_type"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <seed:name rdf:datatype="http://www.w3.org/2001/XMLSchema#normalizedString">$name</seed:name>
    <seed:mode rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedShort">$mode</seed:mode>
    <seed:owner rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedShort">$owner</seed:owner>
    <seed:group rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedShort">$group</seed:group>
    <seed:size rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedLong">$size</seed:size>
    <seed:atime rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedLong">$atime</seed:atime>
    <seed:mtime rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedLong">$mtime</seed:mtime>
    <seed:ctime rdf:datatype="http://www.w3.org/2001/XMLSchema#unsignedLong">$ctime</seed:ctime>
    $contain
  </rdf:Description>
""")
# $base_uri, $seed_base, $object_id, $object_type[Bucket|Object], $name
# $mode, $owner, $group, $size, $atime, $mtime, $ctime
# $contain

t_contain = Template("""<seed:contain rdf:resource="$base_uri#$object_id"/>
    """)
# $base_uri, $object_id

t_footer = """</rdf:RDF>"""

# END: model template


def stat(path):
    result = None
    try:
        result = os.stat(path)
    except Exception, e:
        print 'stat error', e
        result = \
            (0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    finally:
        return result


def main():
    """mknode program"""

    print "SEED directory importer"
    print "usage: <this script> <directory to import>"

    _init_logger()

    # check arguments
    if len(sys.argv) > 1:
        root_directory = sys.argv[1]
    else:
        _SEED_LOG.error('give a directory to import')
        exit(1)

    root_directory = os.path.abspath(root_directory)

    if not os.path.exists(root_directory):
        _SEED_LOG.error('directory not exist')
        exit(1)

    # prepare constants
    seed_base = 'https://sites.google.com/site/ontology2013/seed.owl'
    model_file = 'node.owl'

    (hostname, aliaslist, ipaddrlist) = \
        socket.gethostbyname_ex(socket.gethostname())
    ip_address = ipaddrlist[0]
    base_uri = 'http://' + ip_address + '/' + model_file

    created = time.strftime('%Y-%m-%d %H:%M:%S',
                time.localtime(time.time())).encode('utf-8')

    node_id = getnode()

    _SEED_LOG.info('base URI: %s' % base_uri)

    _SEED_LOG.info('reading object list ...')

    tree = os.walk(root_directory)

    root_id = str(uuid1(node_id))
    root_name = os.path.basename(root_directory)

    object_list = \
        {
            root_directory:
                {
                    'id':   root_id,
                    'name': root_name,
                    'type': 'Bucket',
                    'contain': [],
                    'stat': stat(root_directory)
                }
        }

    for (dirpath, dirnames, filenames) in tree:

        for dirname in dirnames:
            object_id = str(uuid1(node_id))
            object_path = os.path.join(dirpath, dirname)

            object_list[object_path] = \
                {
                    'id':   object_id,
                    'name': dirname,
                    'type': 'Bucket',
                    'contain': [], # fill this later
                    'stat': stat(object_path)
                }

            object_list[dirpath]['contain'].append(object_id)

        for filename in filenames:
            object_id = str(uuid1(node_id))
            object_path = os.path.join(dirpath, filename)

            object_list[object_path] = \
                {
                    'id':   object_id,
                    'name': filename,
                    'type': 'Object',
                    'contain': [], # files contain None
                    'stat': stat(object_path)
                }

            object_list[dirpath]['contain'].append(object_id)


    object_total = len(object_list)

    _SEED_LOG.info('%d objects read' % object_total)

    _SEED_LOG.info('creating node model ...')

    model = open(model_file, 'w')

    header = t_header.substitute(
                seed_base=seed_base,
                base_uri=base_uri,
                version=VERSION,
                created=created,
                license=t_license
            )

    footer = t_footer

    print >> model, header

    progress = 0

    for path, i_object in object_list.iteritems():

        # print path

        progress += 1

        sys.stdout.write(
            "Generating progress: %d%%\r" % int(100*progress/object_total))
        sys.stdout.flush()

        i_object_contain = ''

        if not len(i_object['contain']) == 0:
            for subobject_id in i_object['contain']:
                i_object_contain += t_contain.substitute(
                    base_uri=base_uri, object_id=subobject_id)

        (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) \
            = i_object['stat']

        i_object_text = t_individual.substitute(
            base_uri=base_uri,
            seed_base=seed_base,
            object_id=i_object['id'],
            name=i_object['name'],
            object_type=i_object['type'],

            contain=i_object_contain,

            mode=mode,
            owner=uid,
            group=gid,
            size=size,
            atime=atime,
            mtime=mtime,
            ctime=ctime
        )

        print >> model, i_object_text

    print '\n' # CR after flush

    print >> model, footer

    model.close()

    _SEED_LOG.info('%d object individuals created in %s.' % (object_total, model_file))


if __name__ == '__main__':
    main()

